<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Sonafim - Calendário de Estudos</title>
<style>
:root {
--primary: #4caf50; --primary-light: #5cb860; --secondary: #2196f3; --secondary-light: #4dabf5;
--danger: #f44336; --warning: #ff9800; --bg: #121212; --bg-light: #1e1e1e; --bg-lighter: #2d2d2d;
--text: #ffffff; --text-secondary: #b3b3b3; --border-radius: 12px; --transition: all 0.3s ease;
--shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}
.light-theme {
--primary: #7CAF92; --primary-light: #9CC0A9; --secondary: #6BA6D9; --secondary-light: #8ABDE6;
--danger: #D67F7F; --warning: #E6B366; --bg: #f0f4f8; --bg-light: #e6e9ed; --bg-lighter: #d6dbe0;
--text: #2d3748; --text-secondary: #4a5568; --shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}
* { box-sizing: border-box; margin: 0; padding: 0; }
body {
font-family: 'Poppins', sans-serif; margin: 0; padding: 20px; background: var(--bg); color: var(--text);
min-height: 100vh; line-height: 1.6; transition: background 0.5s ease, color 0.5s ease;
}
.container { display: grid; grid-template-columns: 1fr; gap: 20px; width: 100%; max-width: 1200px; margin: 0 auto; }

/* CALENDÁRIO MAIS COMPACTO */
.calendar {
background: var(--bg-light); border-radius: var(--border-radius); padding: 15px; box-shadow: var(--shadow);
position: relative; overflow: hidden;
}
.calendar-header {
display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;
background: var(--primary); padding: 12px; border-radius: 8px;
}
.calendar-header h2 { font-size: 18px; }
.calendar-header button {
background: rgba(255, 255, 255, 0.15); border: none; color: var(--text); font-size: 16px; cursor: pointer;
padding: 6px 10px; border-radius: 6px; transition: var(--transition); display: flex; align-items: center; justify-content: center;
}
.calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 4px; }
.calendar-grid .day {
font-weight: 600; color: var(--text-secondary); padding: 8px 4px; text-align: center; font-size: 12px;
text-transform: uppercase; letter-spacing: 0.5px;
}
.calendar-grid .date {
aspect-ratio: 1; display: flex; flex-direction: column; align-items: center; justify-content: center;
background: var(--bg-lighter); cursor: pointer; border-radius: 6px; transition: var(--transition);
position: relative; font-size: 14px; font-weight: 500; border: 1px solid rgba(0, 0, 0, 0.05);
min-height: 35px;
}
.calendar-grid .date:hover { background: var(--bg); transform: translateY(-2px); }
.calendar-grid .today { background: var(--primary); font-weight: bold; color: white; }
.task-dot {
width: 6px; height: 6px; background: var(--secondary); border-radius: 50%; margin-top: 2px;
position: absolute; bottom: 4px;
}

/* BOTÕES E CONTROLES */
.theme-toggle {
position: fixed; top: 20px; right: 20px; background: var(--bg-light); color: var(--text); border: none;
width: 45px; height: 45px; border-radius: 50%; cursor: pointer; z-index: 1000; display: flex;
align-items: center; justify-content: center; font-size: 18px; box-shadow: var(--shadow); transition: var(--transition);
}
.theme-toggle:hover { transform: scale(1.1); }
.metrics-button {
position: fixed; bottom: 30px; left: 30px; background: var(--secondary); color: white; border: none;
padding: 12px 20px; border-radius: 50px; cursor: pointer; font-family: inherit; font-weight: 500;
font-size: 14px; z-index: 999; display: flex; align-items: center; gap: 8px; box-shadow: var(--shadow);
transition: var(--transition);
}
.metrics-button:hover { background: var(--secondary-light); transform: translateY(-3px); }
.subjects-button-container { margin-top: 15px; text-align: center; }
.subjects-button {
background: var(--secondary); border: none; color: white; padding: 12px 20px; border-radius: 8px; cursor: pointer;
font-family: inherit; font-weight: 500; transition: var(--transition); display: inline-flex; align-items: center;
gap: 8px; font-size: 14px;
}
.subjects-button:hover { background: var(--secondary-light); transform: translateY(-2px); }

/* MODAL DE MÉTRICAS REORGANIZADO */
.metrics-modal {
display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.7);
z-index: 2000; justify-content: center; align-items: center;
}
.metrics-modal.active { display: flex; }
.metrics-content {
background: var(--bg-light); border-radius: var(--border-radius); padding: 25px; width: 95%;
max-width: 900px; max-height: 90vh; box-shadow: var(--shadow); border: 1px solid rgba(0, 0, 0, 0.05);
overflow-y: auto;
}
.metrics-header {
display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px;
border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}
.metrics-header h2 { font-size: 22px; font-weight: 600; color: var(--text); }
.close-metrics {
background: rgba(0, 0, 0, 0.1); border: none; color: var(--text); font-size: 22px; cursor: pointer;
width: 34px; height: 34px; border-radius: 50%; display: flex; align-items: center; justify-content: center;
transition: var(--transition);
}
.close-metrics:hover { background: rgba(0, 0, 0, 0.2); }

/* LAYOUT DO MODAL DE MÉTRICAS MELHOR ORGANIZADO */
.metrics-layout {
display: grid;
grid-template-columns: 1fr 1fr;
gap: 20px;
margin-bottom: 20px;
}

.metrics-main {
display: flex;
flex-direction: column;
gap: 20px;
}

.metrics-sidebar {
display: flex;
flex-direction: column;
gap: 20px;
}

.metrics-grid {
display: grid;
grid-template-columns: repeat(2, 1fr);
gap: 15px;
}

.metrics-card {
background: var(--bg-lighter); border-radius: var(--border-radius); padding: 18px; transition: var(--transition);
border: 1px solid rgba(0, 0, 0, 0.05);
}
.metrics-card:hover { transform: translateY(-3px); }
.metrics-card-header {
display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;
}
.metrics-card-title {
color: var(--text-secondary); font-size: 13px; font-weight: 500; text-transform: uppercase; letter-spacing: 0.5px;
}
.metrics-card-icon {
width: 32px; height: 32px; border-radius: 50%; background: rgba(168, 213, 186, 0.3); display: flex;
align-items: center; justify-content: center; font-size: 14px; color: var(--primary); flex-shrink: 0;
}
.metrics-card-value { font-size: 24px; font-weight: 700; margin-top: 5px; color: var(--text); }
.metrics-chart-container { height: 250px; position: relative; margin-bottom: 15px; }
.progress-bar {
height: 8px; background: rgba(0, 0, 0, 0.05); border-radius: 4px; margin-top: 8px; overflow: hidden;
}
.progress-fill { height: 100%; background: var(--primary); transition: width 0.3s ease; }
.metrics-subject-list { list-style: none; padding: 0; margin: 0; }
.metrics-subject-item {
display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid rgba(0, 0, 0, 0.05);
font-size: 14px;
}
.metrics-subject-item:last-child { border-bottom: none; }
.chart-legend {
max-height: 150px; overflow-y: auto; padding: 10px; background: var(--bg-light); border-radius: 8px;
margin-top: 15px; display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 8px;
border: 1px solid rgba(0, 0, 0, 0.05);
}
.legend-item { display: flex; align-items: center; gap: 6px; font-size: 12px; }
.legend-color { width: 10px; height: 10px; border-radius: 50%; }
.legend-text {
overflow: hidden; text-overflow: ellipsis; white-space: nowrap; color: var(--text-secondary);
}

/* SEÇÃO DE METAS MELHOR ORGANIZADA */
.goals-section {
background: var(--bg-lighter);
border-radius: var(--border-radius);
padding: 18px;
margin-top: 10px;
}

.goal-item {
margin-bottom: 15px;
}

.goal-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 8px;
}

.goal-title {
font-size: 14px;
font-weight: 500;
color: var(--text-secondary);
}

.goal-value {
font-size: 12px;
text-align: right;
margin-top: 5px;
color: var(--text-secondary);
}

/* MODAIS E DETALHES (mantidos da versão anterior) */
.day-details {
position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 500px;
max-height: 85vh; display: none; z-index: 100; flex-direction: column; background: var(--bg-light);
border-radius: var(--border-radius); overflow: hidden; box-shadow: var(--shadow); border: 1px solid rgba(0, 0, 0, 0.05);
}
.day-details.active { display: flex; }
.day-details-header {
padding: 20px; border-bottom: 1px solid rgba(0, 0, 0, 0.05); position: relative; background: var(--primary);
}
.close-details {
position: absolute; top: 15px; right: 15px; background: rgba(0, 0, 0, 0.2); border: none; color: var(--text);
font-size: 24px; cursor: pointer; width: 36px; height: 36px; border-radius: 50%; display: flex;
align-items: center; justify-content: center; transition: var(--transition);
}
.close-details:hover { background: rgba(0, 0, 0, 0.4); }
.day-details-content { flex: 1; overflow-y: auto; padding: 20px; }
.study-tracker {
margin-bottom: 20px; background: var(--bg-lighter); border-radius: var(--border-radius); padding: 18px;
border: 1px solid rgba(0, 0, 0, 0.05);
}
.study-form { display: grid; grid-template-columns: 1fr; gap: 12px; margin-bottom: 15px; }
.study-input {
padding: 12px; border-radius: 8px; border: 1px solid rgba(0, 0, 0, 0.05); background: var(--bg-light);
color: var(--text); width: 100%; font-family: inherit; font-size: 14px;
}
.time-controls-container {
background: var(--bg-light); border-radius: 8px; padding: 15px; position: relative;
border: 1px solid rgba(0, 0, 0, 0.05);
}
.slider-header { display: flex; justify-content: space-between; margin-bottom: 12px; }
.slider-value { font-weight: bold; color: var(--primary); font-size: 16px; }
.time-slider {
-webkit-appearance: none; width: 100%; height: 6px; border-radius: 3px; background: rgba(0, 0, 0, 0.05);
outline: none; margin: 12px 0;
}
.time-slider::-webkit-slider-thumb {
-webkit-appearance: none; width: 20px; height: 20px; border-radius: 50%; background: var(--primary);
cursor: pointer; transition: var(--transition); border: 2px solid white;
}
.time-slider::-webkit-slider-thumb:hover { transform: scale(1.1); }
.time-buttons { display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin: 12px 0; }
.time-btn {
padding: 8px; background: var(--bg-light); border: 1px solid rgba(0, 0, 0, 0.05); border-radius: 6px;
color: var(--text); cursor: pointer; transition: var(--transition); font-family: inherit; font-size: 13px; text-align: center;
}
.time-btn:hover { background: var(--primary); transform: translateY(-2px); color: white; }
.add-btn {
background: var(--primary); border: none; color: white; padding: 10px 15px; border-radius: 6px; cursor: pointer;
transition: var(--transition); font-family: inherit; font-size: 14px; font-weight: 500; display: flex;
align-items: center; gap: 6px;
}
.add-btn:hover { background: var(--primary-light); transform: translateY(-2px); }
.categories { margin-top: 20px; border-top: 1px solid rgba(0, 0, 0, 0.05); padding-top: 15px; }
.category { margin-bottom: 15px; }
.category h3 {
margin-bottom: 12px; color: var(--primary); display: flex; align-items: center; gap: 8px;
font-size: 15px; font-weight: 600;
}
.task-input-group { display: flex; gap: 8px; margin-bottom: 12px; }
.task-input {
flex: 1; padding: 10px; border: 1px solid rgba(0, 0, 0, 0.05); border-radius: 6px; background: var(--bg-light);
color: var(--text); font-family: inherit; font-size: 14px;
}
.tasks-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 8px; }
.task-item {
display: flex; align-items: center; gap: 8px; padding: 10px; background: var(--bg-lighter); border-radius: 6px;
animation: fadeIn 0.3s ease; transition: var(--transition); border: 1px solid rgba(0, 0, 0, 0.05);
}
.task-item:hover { background: var(--bg); }
.task-text { flex: 1; word-break: break-word; font-size: 14px; }
.task-actions { display: flex; gap: 6px; }
.task-btn {
background: none; border: none; color: var(--text); cursor: pointer; padding: 5px; border-radius: 4px;
transition: var(--transition); width: 28px; height: 28px; display: flex; align-items: center; justify-content: center;
}
.subject-select {
padding: 12px; border-radius: 6px; border: 1px solid rgba(0, 0, 0, 0.05); background: var(--bg-light);
color: var(--text); width: 100%; font-family: inherit; font-size: 14px; cursor: pointer; appearance: none;
background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
background-repeat: no-repeat; background-position: right 10px center; background-size: 16px;
}
.modal {
display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.7);
z-index: 1000; justify-content: center; align-items: center;
}
.modal.active { display: flex; }
.modal-content {
background: var(--bg-light); border-radius: var(--border-radius); padding: 25px; width: 90%; max-width: 450px;
box-shadow: var(--shadow); border: 1px solid rgba(0, 0, 0, 0.05);
}
.modal-header {
display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;
}
.close-modal {
background: rgba(0, 0, 0, 0.1); border: none; color: var(--text); font-size: 22px; cursor: pointer;
width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center;
transition: var(--transition);
}
.close-modal:hover { background: rgba(0, 0, 0, 0.2); }
.study-data-buttons {
position: fixed; bottom: 30px; right: 30px; z-index: 9999; display: flex; gap: 12px;
}
.study-data-btn {
background: rgba(40, 40, 40, 0.8); color: rgba(255, 255, 255, 0.9); border: 1px solid rgba(255, 255, 255, 0.1);
padding: 12px 20px; border-radius: 50px; cursor: pointer; font-family: inherit; font-weight: 500;
transition: var(--transition); display: flex; align-items: center; gap: 8px; font-size: 14px;
}
.study-data-btn:hover {
background: rgba(60, 60, 60, 0.9); color: rgba(255, 255, 255, 1); border-color: rgba(255, 255, 255, 0.3);
transform: translateY(-3px);
}
.calendar-grid .date.completed {
position: relative; background: var(--bg-lighter); border: 2px solid var(--primary);
}
.calendar-grid .date.completed::after {
content: "✓"; position: absolute; top: 3px; right: 3px; color: var(--primary);
font-weight: bold; font-size: 12px;
}
.notification {
position: fixed; top: 20px; right: 20px; padding: 12px 20px; background: var(--primary); color: white;
border-radius: 8px; z-index: 2000; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transition: all 0.5s ease;
opacity: 0; transform: translateX(100%);
}
.notification.show { opacity: 1; transform: translateX(0); }
@keyframes fadeIn {
from { opacity: 0; transform: translateY(-10px); }
to { opacity: 1; transform: translateY(0); }
}
@keyframes slideIn {
from { transform: translateY(20px); opacity: 0; }
to { transform: translateY(0); opacity: 1; }
}
.animate { animation: slideIn 0.5s ease-out; }

/* RESPONSIVIDADE */
@media (max-width: 768px) {
.metrics-layout {
grid-template-columns: 1fr;
}
.metrics-grid {
grid-template-columns: 1fr;
}
.metrics-button, .study-data-buttons { bottom: 20px; }
.metrics-button { left: 20px; }
.study-data-buttons { right: 20px; flex-direction: column; }
.time-buttons { grid-template-columns: repeat(2, 1fr); }
.container { padding: 10px; }
.calendar { padding: 10px; }
.calendar-grid .date { min-height: 30px; font-size: 12px; }
}
@media (max-width: 480px) {
.calendar-grid .date { min-height: 25px; }
.time-buttons { grid-template-columns: repeat(2, 1fr); }
.metrics-content { padding: 15px; }
}
</style>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<button id="theme-toggle" class="theme-toggle"><i class="fas fa-moon"></i></button>
<div class="notification" id="notification">Parabéns! Você atingiu sua meta mensal! 🎉</div>
<div class="container">
<div class="animate">
<div class="calendar" id="calendar">
<div class="calendar-header">
<button id="prev"><i class="fas fa-chevron-left"></i></button>
<h2 id="month-year"></h2>
<button id="next"><i class="fas fa-chevron-right"></i></button>
</div>
<div class="calendar-grid" id="calendar-grid">
<div class="day">Dom</div><div class="day">Seg</div><div class="day">Ter</div><div class="day">Qua</div>
<div class="day">Qui</div><div class="day">Sex</div><div class="day">Sáb</div>
</div>
</div>
<div class="subjects-button-container">
<button class="subjects-button" onclick="openSubjectsModal()">
<i class="fas fa-book"></i> Cadastrar Disciplinas
</button>
</div>
<div class="day-details" id="day-details">
<div class="day-details-header">
<button class="close-details" onclick="closeDayDetails()">&times;</button>
<h2 id="day-title"></h2>
</div>
<div class="day-details-content">
<div class="study-tracker">
<div class="study-form">
<select class="subject-select" id="study-subject">
<option value="" selected disabled>Selecione uma disciplina</option>
</select>
<div class="time-controls-container">
<div class="slider-header">
<span>Tempo de Estudo</span>
<span class="slider-value" id="slider-value">0h 00m</span>
</div>
<div class="time-buttons">
<button class="time-btn" data-minutes="15">15 min</button>
<button class="time-btn" data-minutes="30">30 min</button>
<button class="time-btn" data-minutes="45">45 min</button>
<button class="time-btn" data-minutes="60">60 min</button>
</div>
<input type="range" min="0" max="60" value="0" class="time-slider" id="study-time">
<div class="slider-markers">
<span class="slider-marker">0</span><span class="slider-marker">15</span><span class="slider-marker">30</span>
<span class="slider-marker">45</span><span class="slider-marker">60</span>
</div>
</div>
<button class="add-btn" onclick="addStudySession()">
<i class="fas fa-plus"></i> Adicionar Sessão
</button>
</div>
<div class="time-total">
<span>Tempo Total:</span>
<span id="total-time">0h 00m</span>
</div>
<div class="progress-bar">
<div class="progress-fill" id="study-progress"></div>
</div>
<ul class="session-list" id="session-list"></ul>
</div>
<div class="categories">
<div class="category">
<h3><i class="fas fa-question"></i>Questões</h3>
<div class="task-input-group">
<input type="text" class="task-input" id="new-questions" placeholder="Nova questão">
<button class="add-btn" data-category="questions"><i class="fas fa-plus"></i> Adicionar</button>
</div>
<ul class="tasks-list" id="questions"></ul>
</div>
<div class="category">
<h3><i class="fas fa-book-open"></i>Aulas</h3>
<div class="task-input-group">
<input type="text" class="task-input" id="new-lessons" placeholder="Nova aula">
<button class="add-btn" data-category="lessons"><i class="fas fa-plus"></i> Adicionar</button>
</div>
<ul class="tasks-list" id="lessons"></ul>
</div>
<div class="category">
<h3><i class="fas fa-layer-group"></i>Flashcards</h3>
<div class="task-input-group">
<input type="text" class="task-input" id="new-flashcards" placeholder="Novo flashcard">
<button class="add-btn" data-category="flashcards"><i class="fas fa-plus"></i> Adicionar</button>
</div>
<ul class="tasks-list" id="flashcards"></ul>
</div>
<div class="category">
<h3><i class="fas fa-check-double"></i>Correções de Questões</h3>
<div class="task-input-group">
<input type="text" class="task-input" id="new-corrections" placeholder="Nova correção">
<button class="add-btn" data-category="corrections"><i class="fas fa-plus"></i> Adicionar</button>
</div>
<ul class="tasks-list" id="corrections"></ul>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="modal" id="subjects-modal">
<div class="modal-content">
<div class="modal-header">
<h2>Minhas Disciplinas</h2>
<button class="close-modal" onclick="closeSubjectsModal()">&times;</button>
</div>
<div class="subject-list-container" id="subject-list-container"></div>
<div class="subject-form">
<input type="text" class="subject-input" id="new-subject" placeholder="Nova disciplina">
<button class="add-btn" onclick="addNewSubject()"><i class="fas fa-plus"></i> Adicionar</button>
</div>
</div>
</div>
<div class="modal" id="goal-modal">
<div class="modal-content goal-modal">
<div class="modal-header">
<h2>Configurar Metas</h2>
<button class="close-modal" onclick="closeGoalModal()">&times;</button>
</div>
<div class="modal-body">
<div class="goal-setting">
<label for="weekly-goal">Meta Semanal (horas):</label>
<input type="number" id="weekly-goal" min="0" step="0.5" class="study-input">
</div>
<div class="goal-setting">
<label for="monthly-goal">Meta Mensal (horas):</label>
<input type="number" id="monthly-goal" min="0" step="0.5" class="study-input">
</div>
<button class="add-btn" onclick="saveGoals()" style="margin-top: 20px; width: 100%;">
<i class="fas fa-save"></i> Salvar Metas
</button>
</div>
</div>
</div>
<button class="metrics-button" onclick="openMetricsModal()">
<i class="fas fa-chart-bar"></i>Ver Métricas
</button>
<div class="metrics-modal" id="metrics-modal">
<div class="metrics-content">
<div class="metrics-header">
<h2>Métricas de Estudo</h2>
<button class="close-metrics" onclick="closeMetricsModal()">&times;</button>
</div>
<div class="metrics-layout">
<div class="metrics-main">
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Visão Geral</span>
<div class="metrics-card-icon"><i class="fas fa-chart-pie"></i></div>
</div>
<div class="metrics-chart-container">
<canvas id="metrics-subject-chart"></canvas>
</div>
<div class="chart-legend" id="metrics-chart-legend"></div>
</div>
<div class="metrics-grid">
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Tempo Total</span>
<div class="metrics-card-icon"><i class="fas fa-clock"></i></div>
</div>
<div class="metrics-card-value" id="metrics-total-studied">0h 00m</div>
</div>
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Média Diária</span>
<div class="metrics-card-icon"><i class="fas fa-chart-line"></i></div>
</div>
<div class="metrics-card-value" id="metrics-daily-average">0h 00m</div>
</div>
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Dias Estudados</span>
<div class="metrics-card-icon"><i class="fas fa-calendar-check"></i></div>
</div>
<div class="metrics-card-value" id="metrics-days-studied">0</div>
</div>
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Sessões</span>
<div class="metrics-card-icon"><i class="fas fa-list"></i></div>
</div>
<div class="metrics-card-value" id="metrics-sessions-count">0</div>
</div>
</div>
</div>
<div class="metrics-sidebar">
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Metas de Estudo</span>
<div class="metrics-card-icon"><i class="fas fa-bullseye"></i></div>
</div>
<div class="goals-section">
<div class="goal-item">
<div class="goal-header">
<div class="goal-title">Meta Semanal</div>
</div>
<div class="progress-bar"><div class="progress-fill" id="metrics-weekly-progress"></div></div>
<div class="goal-value" id="metrics-weekly-goal">0/0 horas</div>
</div>
<div class="goal-item">
<div class="goal-header">
<div class="goal-title">Meta Mensal</div>
</div>
<div class="progress-bar"><div class="progress-fill" id="metrics-monthly-progress"></div></div>
<div class="goal-value" id="metrics-monthly-goal">0/0 horas</div>
</div>
</div>
</div>
<div class="metrics-card">
<div class="metrics-card-header">
<span class="metrics-card-title">Disciplinas Mais Estudadas</span>
<div class="metrics-card-icon"><i class="fas fa-list-ol"></i></div>
</div>
<ul class="metrics-subject-list" id="metrics-top-subjects"></ul>
</div>
</div>
</div>
</div>
</div>
<div class="study-data-buttons">
<button class="study-data-btn" onclick="exportStudyData()">
<i class="fas fa-file-export"></i>Exportar
</button>
<button class="study-data-btn import" onclick="importStudyData()">
<i class="fas fa-file-import"></i>Importar
</button>
</div>

<script>
// CÓDIGO JAVASCRIPT COMPLETO (mantido da versão anterior com pequenas adaptações)
// Configurações Iniciais
const today = new Date();
let currentMonth = parseInt(localStorage.getItem('currentMonth')) || today.getMonth();
let currentYear = parseInt(localStorage.getItem('currentYear')) || today.getFullYear();
let selectedDate = null;
let metricsSubjectChart = null;
const DAILY_GOAL = 4 * 60; // 4 horas em minutos
let weeklyGoal = parseInt(localStorage.getItem('weeklyGoal')) || 20 * 60;
let monthlyGoal = parseInt(localStorage.getItem('monthlyGoal')) || 80 * 60;

// Elementos DOM
const elements = {
    monthYear: document.getElementById('month-year'),
    calendarGrid: document.getElementById('calendar-grid'),
    prevButton: document.getElementById('prev'),
    nextButton: document.getElementById('next'),
    dayDetails: document.getElementById('day-details'),
    dayTitle: document.getElementById('day-title'),
    studySubject: document.getElementById('study-subject'),
    sessionList: document.getElementById('session-list'),
    totalTime: document.getElementById('total-time'),
    studyProgress: document.getElementById('study-progress'),
    studyTime: document.getElementById('study-time'),
    sliderValue: document.getElementById('slider-value'),
    subjectsModal: document.getElementById('subjects-modal'),
    subjectListContainer: document.getElementById('subject-list-container'),
    newSubject: document.getElementById('new-subject'),
    themeToggle: document.getElementById('theme-toggle'),
    goalModal: document.getElementById('goal-modal'),
    notification: document.getElementById('notification'),
    metricsModal: document.getElementById('metrics-modal'),
    metricsTotalStudied: document.getElementById('metrics-total-studied'),
    metricsDailyAverage: document.getElementById('metrics-daily-average'),
    metricsDaysStudied: document.getElementById('metrics-days-studied'),
    metricsSessionsCount: document.getElementById('metrics-sessions-count'),
    metricsWeeklyGoal: document.getElementById('metrics-weekly-goal'),
    metricsMonthlyGoal: document.getElementById('metrics-monthly-goal'),
    metricsWeeklyProgress: document.getElementById('metrics-weekly-progress'),
    metricsMonthlyProgress: document.getElementById('metrics-monthly-progress'),
    metricsSubjectChart: document.getElementById('metrics-subject-chart'),
    metricsChartLegend: document.getElementById('metrics-chart-legend'),
    metricsTopSubjects: document.getElementById('metrics-top-subjects')
};

const months = [
    'Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho',
    'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
];

// Funções do Calendário
function renderCalendar(month, year) {
    elements.calendarGrid.innerHTML = '<div class="day">Dom</div><div class="day">Seg</div><div class="day">Ter</div><div class="day">Qua</div><div class="day">Qui</div><div class="day">Sex</div><div class="day">Sáb</div>';
    elements.monthYear.textContent = `${months[month]} ${year}`;
    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    for (let i = 0; i < firstDay; i++) {
        elements.calendarGrid.appendChild(document.createElement('div'));
    }
    
    for (let date = 1; date <= daysInMonth; date++) {
        const dateCell = document.createElement('div');
        dateCell.className = 'date';
        dateCell.textContent = date;
        dateCell.setAttribute('data-date', `${date}-${month+1}-${year}`);
        
        if (date === today.getDate() && month === today.getMonth() && year === today.getFullYear()) {
            dateCell.classList.add('today');
        }
        
        const tasks = loadTasks(`${date}-${month + 1}-${year}`);
        if (Object.values(tasks).some(arr => arr.length > 0)) {
            const dot = document.createElement('div');
            dot.className = 'task-dot';
            dateCell.appendChild(dot);
        }
        
        dateCell.onclick = () => openDayDetails(date, month, year);
        elements.calendarGrid.appendChild(dateCell);
    }
    
    markCompletedDays();
}

// Funções para tarefas
const getStorageKey = (date) => `tasks-${date}`;

const loadTasks = (date) => {
    const key = getStorageKey(date);
    const savedData = localStorage.getItem(key);
    let tasks;
    
    if (savedData) {
        tasks = JSON.parse(savedData);
        if (!tasks.hasOwnProperty('corrections')) {
            tasks.corrections = [];
        }
    } else {
        tasks = {
            questions: [],
            lessons: [],
            flashcards: [],
            corrections: []
        };
    }
    return tasks;
};

const saveTasks = (date, tasks) => localStorage.setItem(getStorageKey(date), JSON.stringify(tasks));

function openDayDetails(date, month, year) {
    selectedDate = `${date}-${month + 1}-${year}`;
    elements.dayTitle.textContent = `${date} de ${months[month]} ${year}`;
    const tasks = loadTasks(selectedDate);
    
    for (const category in tasks) {
        const list = document.getElementById(category);
        list.innerHTML = '';
        tasks[category].forEach(task => createTaskItem(category, task.text, task.completed));
    }
    
    updateStudyDisplay();
    elements.dayDetails.classList.add('active');
}

function createTaskItem(category, text, completed = false) {
    const li = document.createElement('li');
    li.className = 'task-item';
    
    const textSpan = document.createElement('span');
    textSpan.className = 'task-text';
    textSpan.contentEditable = true;
    textSpan.textContent = text;
    textSpan.onblur = () => updateTaskText(category, text, textSpan.textContent);
    
    if (completed) {
        textSpan.style.textDecoration = 'line-through';
        textSpan.style.opacity = '0.7';
    }
    
    const completeBtn = document.createElement('button');
    completeBtn.className = 'task-btn complete';
    completeBtn.innerHTML = '<i class="fas fa-check"></i>';
    completeBtn.onclick = () => toggleTaskComplete(textSpan, category, text);
    
    const removeBtn = document.createElement('button');
    removeBtn.className = 'task-btn remove';
    removeBtn.innerHTML = '<i class="fas fa-trash"></i>';
    removeBtn.onclick = () => {
        li.remove();
        updateTasks(category, text, false, true);
    };
    
    li.append(textSpan, completeBtn, removeBtn);
    document.getElementById(category).appendChild(li);
}

function toggleTaskComplete(element, category, oldText) {
    const completed = element.style.textDecoration === 'line-through';
    element.style.textDecoration = completed ? 'none' : 'line-through';
    element.style.opacity = completed ? '1' : '0.7';
    updateTasks(category, oldText, !completed);
}

function updateTasks(category, oldText, completed = false, remove = false) {
    const tasks = loadTasks(selectedDate);
    if (remove) {
        tasks[category] = tasks[category].filter(t => t.text !== oldText);
    } else {
        const existingIndex = tasks[category].findIndex(t => t.text === oldText);
        if (existingIndex > -1) {
            tasks[category][existingIndex] = { text: tasks[category][existingIndex].text, completed };
        } else {
            tasks[category].push({ text: oldText, completed });
        }
    }
    saveTasks(selectedDate, tasks);
}

function updateTaskText(category, oldText, newText) {
    const tasks = loadTasks(selectedDate);
    const taskIndex = tasks[category].findIndex(t => t.text === oldText);
    if (taskIndex > -1) {
        tasks[category][taskIndex].text = newText;
        saveTasks(selectedDate, tasks);
    }
}

// Funções de Estudo
function addStudySession() {
    const subject = elements.studySubject.value;
    const minutes = parseInt(elements.studyTime.value);
    
    if (!subject || minutes === 0) {
        alert('Selecione uma disciplina e escolha o tempo!');
        return;
    }
    
    addCustomSubject(subject);
    const session = {
        subject,
        minutes: minutes,
        date: selectedDate,
        timestamp: new Date().toISOString()
    };
    
    const sessions = JSON.parse(localStorage.getItem(`sessions-${selectedDate}`) || '[]');
    sessions.push(session);
    localStorage.setItem(`sessions-${selectedDate}`, JSON.stringify(sessions));
    
    updateStudyDisplay();
    clearStudyInputs();
    updateMetricsModal();
    markCompletedDays();
}

function updateStudyDisplay() {
    const sessions = JSON.parse(localStorage.getItem(`sessions-${selectedDate}`) || '[]');
    elements.sessionList.innerHTML = '';
    let totalMinutes = 0;
    
    sessions.forEach(session => {
        totalMinutes += session.minutes;
        const li = document.createElement('li');
        li.className = 'session-item';
        li.innerHTML = `
            <div class="session-info">
                <span class="subject-name">${session.subject}</span>
                <span class="session-time">${Math.floor(session.minutes/60)}h ${(session.minutes%60).toString().padStart(2, '0')}m</span>
            </div>
            <div class="session-actions">
                <button class="task-btn remove" onclick="deleteStudySession('${session.timestamp}')">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        elements.sessionList.appendChild(li);
    });
    
    elements.totalTime.textContent = `${Math.floor(totalMinutes/60)}h ${(totalMinutes%60).toString().padStart(2, '0')}m`;
    elements.studyProgress.style.width = `${Math.min((totalMinutes / DAILY_GOAL) * 100, 100)}%`;
}

function deleteStudySession(timestamp) {
    const sessions = JSON.parse(localStorage.getItem(`sessions-${selectedDate}`) || '[]')
        .filter(session => session.timestamp !== timestamp);
    localStorage.setItem(`sessions-${selectedDate}`, JSON.stringify(sessions));
    updateStudyDisplay();
    updateMetricsModal();
    markCompletedDays();
}

// Funções do Modal de Métricas
function openMetricsModal() {
    updateMetricsModal();
    elements.metricsModal.classList.add('active');
}

function closeMetricsModal() {
    elements.metricsModal.classList.remove('active');
}

function updateMetricsModal() {
    const allSessions = getAllSessions();
    const stats = calculateStats(allSessions);
    
    // Atualizar tempo total estudado
    const totalHours = Math.floor(stats.total / 60);
    const totalMins = stats.total % 60;
    elements.metricsTotalStudied.textContent = `${totalHours}h ${totalMins.toString().padStart(2, '0')}m`;
    
    // Atualizar média diária
    const avgHours = Math.floor(stats.dailyAverage / 60);
    const avgMins = Math.round(stats.dailyAverage % 60);
    elements.metricsDailyAverage.textContent = `${avgHours}h ${avgMins.toString().padStart(2, '0')}m`;
    
    // Atualizar dias estudados e sessões
    elements.metricsDaysStudied.textContent = stats.daysCount;
    elements.metricsSessionsCount.textContent = stats.sessionsCount;
    
    // Atualizar metas
    const monthlyMinutes = calculateMonthlyTime(currentMonth, currentYear);
    let weeklyMinutes = 0;
    const today = new Date();
    
    if (currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay());
        startOfWeek.setHours(0, 0, 0, 0);
        const endOfWeek = new Date(today);
        endOfWeek.setDate(today.getDate() + (6 - today.getDay()));
        endOfWeek.setHours(23, 59, 59, 999);
        weeklyMinutes = calculateWeeklyTime(startOfWeek, endOfWeek);
    }
    
    elements.metricsWeeklyGoal.textContent = `${(weeklyMinutes/60).toFixed(1)}/${weeklyGoal/60} horas`;
    elements.metricsMonthlyGoal.textContent = `${(monthlyMinutes/60).toFixed(1)}/${monthlyGoal/60} horas`;
    
    // Atualizar barras de progresso
    const weeklyProgress = weeklyGoal > 0 ? Math.min((weeklyMinutes / weeklyGoal) * 100, 100) : 0;
    elements.metricsWeeklyProgress.style.width = `${weeklyProgress}%`;
    
    const monthlyProgress = monthlyGoal > 0 ? Math.min((monthlyMinutes / monthlyGoal) * 100, 100) : 0;
    elements.metricsMonthlyProgress.style.width = `${monthlyProgress}%`;
    
    // Atualizar gráfico de disciplinas
    updateMetricsSubjectChart(stats.bySubject);
    
    // Atualizar lista de disciplinas mais estudadas
    updateMetricsTopSubjects(stats.bySubject);
}

function getAllSessions() {
    const sessions = [];
    for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key.startsWith('sessions-')) {
            sessions.push(...JSON.parse(localStorage.getItem(key)));
        }
    }
    return sessions;
}

function calculateStats(sessions) {
    const stats = {
        total: 0,
        bySubject: {},
        days: {},
        dailyAverage: 0,
        daysCount: 0,
        sessionsCount: sessions.length
    };
    
    sessions.forEach(session => {
        stats.total += session.minutes;
        if (!stats.bySubject[session.subject]) {
            stats.bySubject[session.subject] = { minutes: 0, count: 0 };
        }
        stats.bySubject[session.subject].minutes += session.minutes;
        stats.bySubject[session.subject].count++;
        
        const date = session.date;
        stats.days[date] = (stats.days[date] || 0) + session.minutes;
    });
    
    stats.daysCount = Object.keys(stats.days).length;
    const totalDays = stats.daysCount;
    stats.dailyAverage = totalDays > 0 ? stats.total / totalDays : 0;
    
    return stats;
}

function generatePastelColors(count) {
    const colors = [];
    for (let i = 0; i < count; i++) {
        const hue = (i * 360 / Math.max(count, 1)) % 360;
        colors.push(`hsl(${hue}, 70%, 80%)`);
    }
    return colors;
}

function updateMetricsSubjectChart(data) {
    const ctx = elements.metricsSubjectChart.getContext('2d');
    const subjects = Object.keys(data);
    const values = Object.values(data).map(d => d.minutes);
    const backgroundColors = generatePastelColors(subjects.length);
    
    if (metricsSubjectChart) metricsSubjectChart.destroy();
    
    metricsSubjectChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: subjects,
            datasets: [{
                data: values,
                backgroundColor: backgroundColors,
                borderColor: '#FFFFFF',
                borderWidth: 2,
                borderRadius: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            cutout: '65%',
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const minutes = context.raw;
                            const hours = Math.floor(minutes / 60);
                            const mins = minutes % 60;
                            return `${context.label}: ${hours}h ${mins}m`;
                        }
                    }
                }
            }
        }
    });
    
    updateMetricsChartLegend(subjects, backgroundColors, values);
}

function updateMetricsChartLegend(labels, colors, values) {
    elements.metricsChartLegend.innerHTML = '';
    labels.forEach((label, index) => {
        const minutes = values[index];
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        const div = document.createElement('div');
        div.className = 'legend-item';
        div.innerHTML = `
            <div class="legend-color" style="background: ${colors[index]}"></div>
            <div class="legend-text" title="${label}">${label}</div>
            <div>${hours}h ${mins.toString().padStart(2, '0')}m</div>
        `;
        elements.metricsChartLegend.appendChild(div);
    });
}

function updateMetricsTopSubjects(data) {
    const sorted = Object.entries(data).sort((a, b) => b[1].minutes - a[1].minutes);
    const list = document.getElementById('metrics-top-subjects');
    list.innerHTML = '';
    
    sorted.slice(0, 5).forEach(([subject, info]) => {
        const minutes = info.minutes;
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        const li = document.createElement('li');
        li.className = 'metrics-subject-item';
        li.innerHTML = `
            <span>${subject}</span>
            <span>${hours}h ${mins.toString().padStart(2, '0')}m</span>
        `;
        list.appendChild(li);
    });
}

// Funções auxiliares
function clearStudyInputs() {
    elements.studySubject.value = '';
    elements.studyTime.value = 0;
    elements.sliderValue.textContent = '0h 00m';
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.classList.remove('active');
    });
}

function markCompletedDays() {
    const dateElements = document.querySelectorAll('.calendar-grid .date');
    
    dateElements.forEach(dateElement => {
        const date = dateElement.getAttribute('data-date');
        if (!date) return;
        
        const sessions = JSON.parse(localStorage.getItem(`sessions-${date}`) || '[]');
        if (sessions.length > 0) {
            dateElement.classList.add('completed');
        } else {
            dateElement.classList.remove('completed');
        }
    });
}

// Funções de Matérias Personalizadas
function addCustomSubject(subject) {
    if (!subject) return;
    const subjects = JSON.parse(localStorage.getItem('customSubjects')) || [];
    if (!subjects.includes(subject)) {
        subjects.push(subject);
        localStorage.setItem('customSubjects', JSON.stringify(subjects));
        updateSubjectsDropdown();
    }
}

function updateSubjectsDropdown() {
    const subjects = JSON.parse(localStorage.getItem('customSubjects')) || [];
    const dropdown = elements.studySubject;
    while (dropdown.options.length > 1) {
        dropdown.remove(1);
    }
    
    subjects.forEach(subject => {
        const option = document.createElement('option');
        option.value = subject;
        option.textContent = subject;
        dropdown.appendChild(option);
    });
}

// Funções para cálculo de tempo
function calculateMonthlyTime(month, year) {
    let totalMinutes = 0;
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    for (let day = 1; day <= daysInMonth; day++) {
        const dateKey = `${day}-${month + 1}-${year}`;
        const sessions = JSON.parse(localStorage.getItem(`sessions-${dateKey}`) || '[]');
        sessions.forEach(session => {
            totalMinutes += session.minutes;
        });
    }
    return totalMinutes;
}

function calculateWeeklyTime(startDate, endDate) {
    let totalMinutes = 0;
    const current = new Date(startDate);
    const last = new Date(endDate);
    
    while (current <= last) {
        const day = current.getDate();
        const month = current.getMonth() + 1;
        const year = current.getFullYear();
        const dateKey = `${day}-${month}-${year}`;
        const sessions = JSON.parse(localStorage.getItem(`sessions-${dateKey}`) || '[]');
        sessions.forEach(session => {
            totalMinutes += session.minutes;
        });
        current.setDate(current.getDate() + 1);
    }
    return totalMinutes;
}

// Configurar botões de tempo
function setupTimeButtons() {
    document.querySelectorAll('.time-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const minutes = parseInt(this.dataset.minutes);
            elements.studyTime.value = minutes;
            const hours = Math.floor(minutes / 60);
            const mins = minutes % 60;
            elements.sliderValue.textContent = `${hours}h ${mins.toString().padStart(2, '0')}m`;
            elements.studyTime.dispatchEvent(new Event('input'));
        });
    });
}

// Alternância de tema
function toggleTheme() {
    document.body.classList.toggle('light-theme');
    const isLight = document.body.classList.contains('light-theme');
    localStorage.setItem('theme', isLight ? 'light' : 'dark');
    if (isLight) {
        elements.themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    } else {
        elements.themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
    }
}

function checkSavedTheme() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
        document.body.classList.add('light-theme');
        elements.themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    }
}

// Event Listeners
elements.prevButton.addEventListener('click', () => {
    currentMonth--;
    if (currentMonth < 0) {
        currentMonth = 11;
        currentYear--;
    }
    localStorage.setItem('currentMonth', currentMonth);
    localStorage.setItem('currentYear', currentYear);
    renderCalendar(currentMonth, currentYear);
});

elements.nextButton.addEventListener('click', () => {
    currentMonth++;
    if (currentMonth > 11) {
        currentMonth = 0;
        currentYear++;
    }
    localStorage.setItem('currentMonth', currentMonth);
    localStorage.setItem('currentYear', currentYear);
    renderCalendar(currentMonth, currentYear);
});

document.querySelectorAll('.add-btn').forEach(btn => {
    if (btn.dataset.category) {
        btn.addEventListener('click', (e) => {
            const category = e.target.dataset.category;
            const input = document.getElementById(`new-${category}`);
            if (input.value.trim()) {
                createTaskItem(category, input.value.trim());
                updateTasks(category, input.value.trim());
                input.value = '';
            }
        });
    }
});

function closeDayDetails() {
    elements.dayDetails.classList.remove('active');
}

elements.studyTime.addEventListener('input', function() {
    const minutes = parseInt(this.value);
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    elements.sliderValue.textContent = `${hours}h ${mins.toString().padStart(2, '0')}m`;
});

// Funções de Exportação/Importação
function exportStudyData() {
    const exportData = {};
    for(let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if(key.startsWith('tasks-') || key.startsWith('sessions-') ||
            key === 'currentMonth' || key === 'currentYear' || key === 'customSubjects' ||
            key === 'weeklyGoal' || key === 'monthlyGoal') {
            exportData[key] = localStorage.getItem(key);
        }
    }
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const blob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `study_backup_${new Date().toISOString().slice(0,10)}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function importStudyData() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    input.onchange = e => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                Object.keys(importedData).forEach(key => {
                    localStorage.removeItem(key);
                    localStorage.setItem(key, importedData[key]);
                });
                alert('Dados importados com sucesso! Atualize a página.');
                location.reload();
            } catch (error) {
                alert('Erro na importação: Arquivo inválido');
            }
        };
        reader.readAsText(file);
    };
    input.click();
}

// Inicialização
function init() {
    renderCalendar(currentMonth, currentYear);
    updateSubjectsDropdown();
    setupTimeButtons();
    checkSavedTheme();
    
    elements.themeToggle.addEventListener('click', toggleTheme);
    elements.studyTime.dispatchEvent(new Event('input'));
    markCompletedDays();
}

document.addEventListener('DOMContentLoaded', init);
</script>
</body>
</html>
